# CIVICA 144 - Server Configuration
server {
    listen 8080;
    listen [::]:8080;
    server_name _;
    root /usr/share/nginx/html;
    index index.html;

    # Security headers specific to CIVICA 144
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://js.paystack.co https://www.paypal.com https://www.sandbox.paypal.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://api.paystack.co https://api.sandbox.paypal.com https://api.paypal.com; frame-src https://js.paystack.co https://www.paypal.com https://www.sandbox.paypal.com;" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Rate limiting
    limit_req zone=general burst=20 nodelay;
    limit_conn conn_limit_per_ip 20;

    # Static asset caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # CORS headers for fonts and assets
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, OPTIONS";
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept";
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }

    # API routes (for future backend integration)
    location /api/ {
        limit_req zone=api burst=50 nodelay;
        
        # CORS headers
        add_header Access-Control-Allow-Origin "$http_origin" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization, X-Guardian-Token" always;
        add_header Access-Control-Allow-Credentials "true" always;

        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "$http_origin";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization, X-Guardian-Token";
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }

        # Proxy to backend (when implemented)
        # proxy_pass http://backend;
        # proxy_set_header Host $host;
        # proxy_set_header X-Real-IP $remote_addr;
        # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # proxy_set_header X-Forwarded-Proto $scheme;
        
        # For now, return 404 for API routes
        return 404;
    }

    # Health check endpoint
    location /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "CIVICA 144 - Healthy\nTimestamp: $time_iso8601\nServer: $hostname\n";
    }

    # Metrics endpoint (basic)
    location /metrics {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "# CIVICA 144 Basic Metrics\ncivica_requests_total $request_id\ncivica_timestamp $time_iso8601\n";
    }

    # Guardian Intelligence Layer routes
    location /guardian {
        try_files $uri $uri/ /index.html;
        
        # Additional security for Guardian routes
        add_header X-Guardian-Protected "true" always;
        
        # Rate limiting for sensitive routes
        limit_req zone=api burst=10 nodelay;
    }

    # Payment webhook endpoints (high security)
    location /webhooks/ {
        limit_req zone=api burst=5 nodelay;
        
        # Enhanced security headers
        add_header X-Webhook-Protected "true" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        
        # Only allow POST requests
        if ($request_method !~ ^(POST)$) {
            return 405;
        }
        
        # Proxy to webhook handler (when implemented)
        # proxy_pass http://webhook-handler;
        
        # For now, return 404
        return 404;
    }

    # Main SPA routing
    location / {
        try_files $uri $uri/ /index.html;
        
        # Cache control for HTML
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Security: Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Security: Deny access to sensitive files
    location ~* \.(env|config|log|sql|bak|swp|tmp)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Gzip compression for specific routes
    location ~* \.(json|xml|txt)$ {
        gzip_static on;
        expires 1h;
        add_header Cache-Control "public";
    }

    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
}

# Optional: Redirect HTTP to HTTPS (for production with SSL)
# server {
#     listen 80;
#     listen [::]:80;
#     server_name your-domain.com www.your-domain.com;
#     return 301 https://$server_name$request_uri;
# }
